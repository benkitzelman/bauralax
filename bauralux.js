// Generated by CoffeeScript 1.9.3
(function() {
  var Game;

  window.Q = Quintus({
    development: true
  }).include("Sprites, Scenes, Input, 2D, Touch, UI").setup({
    maximize: true,
    scaleToFit: true
  }).controls().touch();

  Game = (function() {
    Game.assets = ["star.png", "planet0.png", "planet1.png"];

    Game.start = function() {
      if (this.started == null) {
        this.started = new $.Deferred;
      }
      if (this.started.state() === 'resolved') {
        return;
      }
      console.log('starting game...');
      this.instance = new Game();
      return window.g = this.instance;
    };

    function Game() {
      this.Q = window.Q;
      this.Q.gravityY = 0;
      this.Q.gravityX = 0;
      this.Q.clearColor = "#000";
      this.loadAssets();
    }

    Game.prototype.loadAssets = function() {
      var assetList;
      assetList = Game.assets.map(function(fileName) {
        return "/assets/images/" + fileName;
      }).join(', ');
      return this.Q.load(assetList, (function(_this) {
        return function() {
          console.log('OK');
          _this.Q.stageScene("level1");
          return Game.started.resolveWith(_this);
        };
      })(this));
    };

    return Game;

  })();

  $(document).ready(function() {
    return Game.start();
  });

  Q.Sprite.extend("Planet", {
    init: function(p) {
      var scale;
      scale = Math.ceil(Math.random() * 10) / 10;
      this._super(Q._extend({
        asset: this.randomAsset(),
        scale: scale,
        type: Q.SPRITE_NONE
      }, p));
      this.add('2d');
      return this.on("hit.sprite", this.onCollision);
    },
    randomAsset: function() {
      var assets;
      assets = [0, 1].map(function(i) {
        return "/assets/images/planet" + i + ".png";
      });
      return assets[Math.floor(Math.random() * 10) % assets.length];
    },
    teamColor: function() {
      switch (this.p.team) {
        case "RED":
          return "rgba(255,0,0,0.25)";
        case "GREEN":
          return "rgba(0,255,0,0.25)";
        case "BLUE":
          return "rgba(0,0,255,0.25)";
        default:
          return "rgba(45,45,45,0.5)";
      }
    },
    draw: function(ctx) {
      ctx.save();
      ctx.globalCompositeOperation = 'lighter';
      ctx.drawImage(this.asset(), 0, 0, this.asset().width, this.asset().height);
      ctx.beginPath();
      ctx.fillStyle = this.teamColor();
      ctx.arc(this.asset().width / 2, this.asset().height / 2, this.asset().width / 2, 0, 180);
      ctx.fill();
      return ctx.restore();
    },
    onCollision: (function(_this) {
      return function(collision) {
        return console.log('HIT');
      };
    })(this)
  });

  Q.Sprite.extend('Star', {
    init: function(p) {
      return this._super(p, {
        x: Math.random() * Q.width,
        y: Math.random() * Q.height,
        scale: Math.max(Math.random(), .3),
        asset: '/assets/images/star.png',
        type: Q.SPRITE_NONE
      });
    }
  });

  Q.scene("endGame", function(stage) {
    var button, container, label;
    container = stage.insert(new Q.UI.Container({
      x: Q.width / 2,
      y: Q.height / 2,
      fill: "rgba(0,0,0,0.5)"
    }));
    button = container.insert(new Q.UI.Button({
      x: 0,
      y: 0,
      fill: "#CCCCCC",
      label: "Play Again"
    }));
    label = container.insert(new Q.UI.Text({
      x: 10,
      y: -10 - button.p.h,
      label: stage.options.label
    }));
    button.on("click", function() {
      Q.clearStages();
      return Q.stageScene('level1');
    });
    return container.fit(20);
  });

  Q.scene("level1", function(stage) {
    var j, planetOne, planetThree, planetTwo, planets, ref;
    planets = [
      planetOne = new Q.Planet({
        x: 300,
        y: 100,
        team: 'RED'
      }), planetTwo = new Q.Planet({
        x: 700,
        y: 500,
        team: 'GREEN'
      }), planetThree = new Q.Planet({
        x: 1200,
        y: 300,
        team: 'BLUE'
      })
    ];
    for (j = 1, ref = Q.width * Q.height / 10000; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--) {
      stage.insert(new Q.Star);
    }
    return planets.forEach(function(p) {
      return stage.insert(p);
    });
  });

}).call(this);
